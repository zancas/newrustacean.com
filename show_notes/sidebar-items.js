initSidebarItems({"macro":[["main_try","Define a macro like `try!` but which works in the context of `main()`."],["print_ident_name","Define an ident macro to show how they can capture different syntax."]],"mod":[["bonus","Bonus episodes: shorter, and usually more about community or philosophy."],["cysk","Brief discussions of important and useful crates around the Rust ecosystem."],["e000","Hello, world!"],["e001","Document all the things!"],["e002","Something borrowed, something... moved?"],["e003","No. more. nulls."],["e004","Functionalized"],["e005","Allocate it where?"],["e006","Modularize this!"],["e007","Testify"],["e008","Just like something else"],["e009","Composing a Rustic tune"],["e010","Macros rule!"],["e011","Once upon a type"],["e012","I'm not familiar with that expression"],["e013","Staying alive"],["e014","Stringing things along"],["e015","Not dumb pointers."],["e016","`RefCell`s and code smells"],["e017","Point me where I need to go"],["e018","`Borrow`, `AsRef`, `Deref`: my head hurts now"],["e019","Let's `Clone` a `Cow`!"],["e020","Putting code in its place"],["interview","Interviews: hearing from people around the Rust community!"],["meta","Meta episodes: content about the show itself."],["news","News: occasional episodes dedicated to changes in Rust and its ecosystem."]]});